var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var browser_1 = require('angular2/platform/browser');
var Sliderpanel = (function () {
    function Sliderpanel(viewContainer) {
        this.dom = new browser_1.BrowserDomAdapter();
        var self = this;
        self.viewContainer = viewContainer;
        self.el = viewContainer.element.nativeElement;
    }
    Sliderpanel.prototype.getElementByClass = function (element) {
        var self = this;
        return self.dom.getElementsByClassName(self.el, element)[0];
    };
    Sliderpanel.prototype.removeAllClassesFrom = function (elementClass, selected) {
        var self = this;
        var element = self.getElementByClass(elementClass);
        if (selected) {
            self.dom.removeClass(element, 'selected');
            return;
        }
        self.dom.removeClass(element, 'left');
        self.dom.removeClass(element, 'right');
        self.dom.removeClass(element, 'center');
        self.dom.removeClass(element, 'transition');
    };
    Sliderpanel.prototype.addClassesTo = function (elementClass, classesToAdd) {
        var self = this;
        var element = self.getElementByClass(elementClass);
        for (var i = 0; i < classesToAdd.length; i++) {
            self.dom.addClass(element, classesToAdd[i]);
        }
    };
    Sliderpanel.prototype.slideToPage = function (toClassName, i_direction) {
        var self = this;
        if (toClassName == 'selected')
            return;
        self.removeAllClassesFrom(toClassName);
        self.addClassesTo(toClassName, ["page", i_direction]);
        var parent = self.dom.parentElement(self.getElementByClass(toClassName));
        var grandparent = self.dom.parentElement(parent);
        self.dom.getProperty(grandparent, 'offsetWidth');
        self.removeAllClassesFrom(toClassName);
        self.addClassesTo(toClassName, ['page', 'transition', 'center']);
        self.removeAllClassesFrom('selected');
        self.addClassesTo('selected', ['page', 'transition', i_direction === 'left' ? 'right' : 'left']);
        self.removeAllClassesFrom('selected', true);
        self.addClassesTo(toClassName, ['selected']);
    };
    Sliderpanel = __decorate([
        core_1.Component({
            selector: 'Sliderpanel',
            template: "<ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [core_1.ViewContainerRef])
    ], Sliderpanel);
    return Sliderpanel;
})();
exports.Sliderpanel = Sliderpanel;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBzL3NsaWRlcnBhbmVsL3NsaWRlcnBhbmVsLnRzIl0sIm5hbWVzIjpbIlNsaWRlcnBhbmVsIiwiU2xpZGVycGFuZWwuY29uc3RydWN0b3IiLCJTbGlkZXJwYW5lbC5nZXRFbGVtZW50QnlDbGFzcyIsIlNsaWRlcnBhbmVsLnJlbW92ZUFsbENsYXNzZXNGcm9tIiwiU2xpZGVycGFuZWwuYWRkQ2xhc3Nlc1RvIiwiU2xpZGVycGFuZWwuc2xpZGVUb1BhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFCQUEwQyxlQUFlLENBQUMsQ0FBQTtBQUMxRCx3QkFBZ0MsMkJBQTJCLENBQUMsQ0FBQTtBQU01RDtJQVVJQSxxQkFBWUEsYUFBOEJBO1FBRmxDQyxRQUFHQSxHQUFHQSxJQUFJQSwyQkFBaUJBLEVBQUVBLENBQUNBO1FBR2xDQSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNoQkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsYUFBYUEsQ0FBQ0E7UUFDbkNBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLGFBQWFBLENBQUNBO0lBQ2xEQSxDQUFDQTtJQUVPRCx1Q0FBaUJBLEdBQXpCQSxVQUEwQkEsT0FBY0E7UUFDcENFLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBQ2hCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBQ2hFQSxDQUFDQTtJQUVPRiwwQ0FBb0JBLEdBQTVCQSxVQUE2QkEsWUFBZ0JBLEVBQUVBLFFBQWlCQTtRQUM1REcsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLElBQUlBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDbkRB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QUNBLFlBQVlBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO0lBQ2pEQSxDQUFDQTtJQTNETEw7UUFBQ0EsZ0JBQVNBLENBQUNBO1lBQ1BBLFFBQVFBLEVBQUVBLGFBQWFBO1lBQ3ZCQSxRQUFRQSxFQUFFQSwyQkFBMkJBO1NBQ3hDQSxDQUFDQTs7b0JBeUREQTtJQUFEQSxrQkFBQ0E7QUFBREEsQ0E1REEsQUE0RENBLElBQUE7QUF2RFksbUJBQVcsY0F1RHZCLENBQUEiLCJmaWxlIjoiY29tcHMvc2xpZGVycGFuZWwvU2xpZGVycGFuZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnYW5ndWxhcjIvY29yZSc7XHJcbmltcG9ydCB7QnJvd3NlckRvbUFkYXB0ZXJ9IGZyb20gJ2FuZ3VsYXIyL3BsYXRmb3JtL2Jyb3dzZXInO1xyXG5cclxuLyoqXHJcbiBAY2xhc3MgU2xpZGVycGFuZWxcclxuIGV4YW1wbGU6IHNlbGYuc2xpZGVUb1BhZ2UoJ2NhbXBhaWduTmFtZVNlbGVjdG9yVmlldycsICdsZWZ0JylcclxuICoqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnU2xpZGVycGFuZWwnLFxyXG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFNsaWRlcnBhbmVsIHtcclxuICAgIHByaXZhdGUgZWw6YW55O1xyXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOlZpZXdDb250YWluZXJSZWY7XHJcbiAgICBwcml2YXRlIGRvbSA9IG5ldyBCcm93c2VyRG9tQWRhcHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXI6Vmlld0NvbnRhaW5lclJlZikge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLnZpZXdDb250YWluZXIgPSB2aWV3Q29udGFpbmVyO1xyXG4gICAgICAgIHNlbGYuZWwgPSB2aWV3Q29udGFpbmVyLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEVsZW1lbnRCeUNsYXNzKGVsZW1lbnQ6c3RyaW5nKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBzZWxmLmRvbS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHNlbGYuZWwsIGVsZW1lbnQpWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlQWxsQ2xhc3Nlc0Zyb20oZWxlbWVudENsYXNzOmFueSwgc2VsZWN0ZWQ/OmJvb2xlYW4pIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBzZWxmLmdldEVsZW1lbnRCeUNsYXNzKGVsZW1lbnRDbGFzcyk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkKXtcclxuICAgICAgICAgICAgc2VsZi5kb20ucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZi5kb20ucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ2xlZnQnKTtcclxuICAgICAgICBzZWxmLmRvbS5yZW1vdmVDbGFzcyhlbGVtZW50LCAncmlnaHQnKTtcclxuICAgICAgICBzZWxmLmRvbS5yZW1vdmVDbGFzcyhlbGVtZW50LCAnY2VudGVyJyk7XHJcbiAgICAgICAgc2VsZi5kb20ucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ3RyYW5zaXRpb24nKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZENsYXNzZXNUbyhlbGVtZW50Q2xhc3M6YW55LCBjbGFzc2VzVG9BZGQ6c3RyaW5nW10pIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBzZWxmLmdldEVsZW1lbnRCeUNsYXNzKGVsZW1lbnRDbGFzcyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzVG9BZGQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc2VsZi5kb20uYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3Nlc1RvQWRkW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNsaWRlVG9QYWdlKHRvQ2xhc3NOYW1lOnN0cmluZywgaV9kaXJlY3Rpb246c3RyaW5nKTp2b2lkIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRvQ2xhc3NOYW1lID09ICdzZWxlY3RlZCcpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyBQb3NpdGlvbiB0aGUgbmV3IHBhZ2UgYXQgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIHRoZSBhbmltYXRpb25cclxuICAgICAgICBzZWxmLnJlbW92ZUFsbENsYXNzZXNGcm9tKHRvQ2xhc3NOYW1lKTtcclxuICAgICAgICBzZWxmLmFkZENsYXNzZXNUbyh0b0NsYXNzTmFtZSwgW1wicGFnZVwiLCBpX2RpcmVjdGlvbl0pO1xyXG4gICAgICAgIC8vIFBvc2l0aW9uIHRoZSBuZXcgcGFnZSBhbmQgdGhlIGN1cnJlbnQgcGFnZSBhdCB0aGUgZW5kaW5nIHBvc2l0aW9uIG9mIHRoZWlyIGFuaW1hdGlvbiB3aXRoIGEgdHJhbnNpdGlvbiBjbGFzcyBpbmRpY2F0aW5nIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uIGFuZCBmb3JjZSByZWZsb3cgb2YgcGFnZSBzbyBpdCByZW5kZXJzXHJcbiAgICAgICAgdmFyIHBhcmVudCA9IHNlbGYuZG9tLnBhcmVudEVsZW1lbnQoc2VsZi5nZXRFbGVtZW50QnlDbGFzcyh0b0NsYXNzTmFtZSkpO1xyXG4gICAgICAgIHZhciBncmFuZHBhcmVudCA9IHNlbGYuZG9tLnBhcmVudEVsZW1lbnQocGFyZW50KTtcclxuICAgICAgICBzZWxmLmRvbS5nZXRQcm9wZXJ0eShncmFuZHBhcmVudCwgJ29mZnNldFdpZHRoJyk7XHJcbiAgICAgICAgc2VsZi5yZW1vdmVBbGxDbGFzc2VzRnJvbSh0b0NsYXNzTmFtZSk7XHJcbiAgICAgICAgc2VsZi5hZGRDbGFzc2VzVG8odG9DbGFzc05hbWUsIFsncGFnZScsICd0cmFuc2l0aW9uJywgJ2NlbnRlciddKTtcclxuICAgICAgICBzZWxmLnJlbW92ZUFsbENsYXNzZXNGcm9tKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIHNlbGYuYWRkQ2xhc3Nlc1RvKCdzZWxlY3RlZCcsIFsncGFnZScsICd0cmFuc2l0aW9uJywgaV9kaXJlY3Rpb24gPT09ICdsZWZ0JyA/ICdyaWdodCcgOiAnbGVmdCddKTtcclxuICAgICAgICBzZWxmLnJlbW92ZUFsbENsYXNzZXNGcm9tKCdzZWxlY3RlZCcsdHJ1ZSk7XHJcbiAgICAgICAgc2VsZi5hZGRDbGFzc2VzVG8odG9DbGFzc05hbWUsIFsnc2VsZWN0ZWQnXSk7XHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
